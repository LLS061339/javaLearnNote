编程习惯：对于forword和sendRedirect语句，后面最好加上return

①环境支持：安装tomcat（配置eclipse集成）


②jsp在html代码中执行java代码（<% java代码 %>）
  
  servlet在java代码中输出html（通过out.print输出html）

③java web开发有两个类需要掌握：HttpRequestServlet和HttpResponseServlet（这两个类由tomCat提供）

HttpRequestServlet作用：封装客户端请求，常用的方法包括 获取请求IP、获取请求路径、获取请求参数、获
取cookie

HttpResponseServlet作用：封装服务器端功能， 常用的方法包括 输出html、设置响应头（例如cookie）、设
置客户端重定向（302）

④filter过滤器 作用： 对所有的输入输出进行操作（例如：检查客户端请求数据合法性、对服务器端输出内
容进行编码）

⑤HTTP连接是无状态的，所以服务器无法区分客户端请求的连续性（服务器无法区分不同请求是否同一客户端
发出）。为了保留状态，所以需要cookie和session

⑥为了正确调用jsp和servlet文件，需要配置web.xml文件（路由功能）




TomCat

可以将已有的项目直接放到这个文件夹下F:\study\apache-tomcat-6.0.44\webapps\ROOT发布
启动内部的Startup.bat


tomcat配置热部署（修改servlet后自动生效）

在Servers项目-> Tomcat文件夹-> server.xml中->在Context标签中增加 crossContext="true"

jsp作用域：

1.page 只在当前jsp页面 定义并使用；在其他servlet或jsp页面定义的变量，当前jsp页面无法使用

2.request 属于同一次请求才可以访问request中的变量，例如：在servlet中定义一个变量，并存入request中，然后servlet转发到jsp页面，则jsp页面可以访问该变量，其他请求无法访问该变量

3.session 携带同一个sessionID的多个请求，都可以访问同一个session中的变量

4.application 全局作用域；在application中存储的属性，任何请求都可以访问到

jsp作用域*共同点：request、session、application都有getAttribute、setAttribute、removeAttribute方法

filter过滤器：

操作补充：调用request方法需要重新定义一个HttpServletRequest类的对象（respond同理）；
	  
	  如果调用转发或重定向语句，就不能调用chain.doFilter；

	  对于需要正常输出的页面必须调用chain.doFilter，否则页面无法显示




补充：

1.建立项目：new project->web-> Dynamic Web Project

2.jsp文件或静态资源放在WebContent文件夹里；servlet文件放在Java Resources->src里

3.访问tomcat的时候，url是http://localhost:8080/项目名/index.jsp

4.外部引入的jar包放在WebContent/WEB-INF/lib（不需要加入build path 它会自动识别）

5.如果找不到HttpSession类的话，在window->preferrnces->java->build path->classpath variables增加一个servlet-api.jar（在tomcat的安装目录下的lib文件夹里）

6.关于编码的问题：保持 文件编码、<%@ page%>中的编码、<meta>中的编码均为utf-8，就可以保证输出为中文；接受请求中的参数时，需要通过new String(request.getParameter("username").getBytes("ISO-8859-1"), "UTF-8")转换，才能够得到中文数据